/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package fase_3_201404297;

import java.awt.FlowLayout;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.Reader;
import java.util.Iterator;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.json.simple.*;
import org.json.simple.parser.JSONParser;
import org.mindrot.jbcrypt.BCrypt;

/**
 *
 * @author adria
 */
public class Administrador extends javax.swing.JFrame {
    ArbolB users = new ArbolB();
    TablaHash mensajeros = new TablaHash();
    Grafo lugares = new Grafo();
    /**
     * Creates new form Administador
     */
    public Administrador() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jText_consola = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu_cerrar_sesion = new javax.swing.JMenuItem();
        jMenu_iniciar_sesion = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenu_carga_lugar = new javax.swing.JMenuItem();
        jMenu_carga_mensajero = new javax.swing.JMenuItem();
        jMenu_carga_ruta = new javax.swing.JMenuItem();
        jMenu_carga_usuarios = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenu_blockchain = new javax.swing.JMenuItem();
        jMenu_grafo_rutas = new javax.swing.JMenuItem();
        jMenu_lista_adyacencia = new javax.swing.JMenuItem();
        jMenu_nodo_red = new javax.swing.JMenuItem();
        jMenu_tabla_dispersion = new javax.swing.JMenuItem();

        jMenuItem1.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Administrador");

        jLabel1.setText("Consola");

        jText_consola.setEditable(false);
        jText_consola.setColumns(20);
        jText_consola.setRows(5);
        jScrollPane1.setViewportView(jText_consola);

        jButton1.setText("mejor ruta");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jMenu1.setText("Archivo");

        jMenu_cerrar_sesion.setText("Cerrar Sesion");
        jMenu_cerrar_sesion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu_cerrar_sesionActionPerformed(evt);
            }
        });
        jMenu1.add(jMenu_cerrar_sesion);

        jMenu_iniciar_sesion.setText("Iniciar Sesion");
        jMenu1.add(jMenu_iniciar_sesion);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Carga");

        jMenu_carga_lugar.setText("Lugares");
        jMenu_carga_lugar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu_carga_lugarActionPerformed(evt);
            }
        });
        jMenu2.add(jMenu_carga_lugar);

        jMenu_carga_mensajero.setText("Mensajeros");
        jMenu_carga_mensajero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu_carga_mensajeroActionPerformed(evt);
            }
        });
        jMenu2.add(jMenu_carga_mensajero);

        jMenu_carga_ruta.setText("Rutas");
        jMenu_carga_ruta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu_carga_rutaActionPerformed(evt);
            }
        });
        jMenu2.add(jMenu_carga_ruta);

        jMenu_carga_usuarios.setText("Usuarios");
        jMenu_carga_usuarios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu_carga_usuariosActionPerformed(evt);
            }
        });
        jMenu2.add(jMenu_carga_usuarios);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Ver");

        jMenu_blockchain.setText("Blockchain");
        jMenu3.add(jMenu_blockchain);

        jMenu_grafo_rutas.setText("Grafo de Rutas");
        jMenu_grafo_rutas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu_grafo_rutasActionPerformed(evt);
            }
        });
        jMenu3.add(jMenu_grafo_rutas);

        jMenu_lista_adyacencia.setText("Lista de Adyacencia");
        jMenu_lista_adyacencia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu_lista_adyacenciaActionPerformed(evt);
            }
        });
        jMenu3.add(jMenu_lista_adyacencia);

        jMenu_nodo_red.setText("Nodos de la red");
        jMenu3.add(jMenu_nodo_red);

        jMenu_tabla_dispersion.setText("Tabla de dispersion (Hash)");
        jMenu_tabla_dispersion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu_tabla_dispersionActionPerformed(evt);
            }
        });
        jMenu3.add(jMenu_tabla_dispersion);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(82, 82, 82)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 219, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(56, 56, 56)
                        .addComponent(jButton1)))
                .addContainerGap(231, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenu_carga_usuariosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu_carga_usuariosActionPerformed
        // TODO add your handling code here:
        JFileChooser selector = new JFileChooser();
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("Archivos JSON", "json");
        selector.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        selector.setFileFilter(filtro);
        int result = selector.showOpenDialog(this);
        File archivo = selector.getSelectedFile();
        if ((archivo==null) || (archivo.getName().equals(""))){
            JOptionPane.showMessageDialog(this, "Nombre de archivo invalido",
                    "Nombre de archivo invalido",JOptionPane.ERROR_MESSAGE);   
        }
        carga_user_json(archivo.getAbsolutePath());
        
        NodoB prueba = users.buscar("Vanny07");
        if(prueba == null){
            System.out.println("el metodo no funciono");
        }else{
            System.out.println("nombre: " + prueba.nombre + " pass: "+prueba.contrasenia);
        }
    }//GEN-LAST:event_jMenu_carga_usuariosActionPerformed

    private void jMenu_carga_mensajeroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu_carga_mensajeroActionPerformed
        // TODO add your handling code here:
        JFileChooser selector = new JFileChooser();
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("Archivos JSON", "json");
        selector.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        selector.setFileFilter(filtro);
        int result = selector.showOpenDialog(this);
        File archivo = selector.getSelectedFile();
        if ((archivo==null) || (archivo.getName().equals(""))){
            JOptionPane.showMessageDialog(this, "Nombre de archivo invalido",
                    "Nombre de archivo invalido",JOptionPane.ERROR_MESSAGE);   
        }
        carga_mensajeros(archivo.getAbsolutePath());
        System.out.println(mensajeros.elementos + " factor cargar: "+mensajeros.factor_carga);
        mensajeros.imprimir();
    }//GEN-LAST:event_jMenu_carga_mensajeroActionPerformed

    private void jMenu_cerrar_sesionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu_cerrar_sesionActionPerformed
        // TODO add your handling code here:
        Ingreso nuevo = new Ingreso(users,mensajeros,lugares);
        nuevo.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jMenu_cerrar_sesionActionPerformed

    private void jMenu_tabla_dispersionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu_tabla_dispersionActionPerformed
        // TODO add your handling code here:
        String d_img = mensajeros.imagen();
        imagen_externo(d_img);
    }//GEN-LAST:event_jMenu_tabla_dispersionActionPerformed

    private void jMenu_carga_lugarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu_carga_lugarActionPerformed
        // TODO add your handling code here:
        //aqui va la carga de lugares
        JFileChooser selector = new JFileChooser();
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("Archivos JSON", "json");
        selector.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        selector.setFileFilter(filtro);
        int result = selector.showOpenDialog(this);
        File archivo = selector.getSelectedFile();
        if ((archivo==null) || (archivo.getName().equals(""))){
            JOptionPane.showMessageDialog(this, "Nombre de archivo invalido",
                    "Nombre de archivo invalido",JOptionPane.ERROR_MESSAGE);   
        }
        carga_lugares(archivo.getAbsolutePath());
    }//GEN-LAST:event_jMenu_carga_lugarActionPerformed

    private void jMenu_carga_rutaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu_carga_rutaActionPerformed
        // TODO add your handling code here:
        JFileChooser selector = new JFileChooser();
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("Archivos JSON", "json");
        selector.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        selector.setFileFilter(filtro);
        int result = selector.showOpenDialog(this);
        File archivo = selector.getSelectedFile();
        if ((archivo==null) || (archivo.getName().equals(""))){
            JOptionPane.showMessageDialog(this, "Nombre de archivo invalido",
                    "Nombre de archivo invalido",JOptionPane.ERROR_MESSAGE);   
        }
        carga_ruta(archivo.getAbsolutePath());
    }//GEN-LAST:event_jMenu_carga_rutaActionPerformed

    private void jMenu_lista_adyacenciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu_lista_adyacenciaActionPerformed
        // TODO add your handling code here:
        String dir_ady = lugares.imagen_lista("lista_ady");
        imagen_externo(dir_ady);
         
    }//GEN-LAST:event_jMenu_lista_adyacenciaActionPerformed

    private void jMenu_grafo_rutasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu_grafo_rutasActionPerformed
        // TODO add your handling code here:
        String dir_grafo = lugares.imagen_grafo("grafo");
        imagen_externo(dir_grafo);
    }//GEN-LAST:event_jMenu_grafo_rutasActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        lugares.ruta_corta(1,6);
        
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Administrador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Administrador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Administrador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Administrador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Administrador().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenu_blockchain;
    private javax.swing.JMenuItem jMenu_carga_lugar;
    private javax.swing.JMenuItem jMenu_carga_mensajero;
    private javax.swing.JMenuItem jMenu_carga_ruta;
    private javax.swing.JMenuItem jMenu_carga_usuarios;
    private javax.swing.JMenuItem jMenu_cerrar_sesion;
    private javax.swing.JMenuItem jMenu_grafo_rutas;
    private javax.swing.JMenuItem jMenu_iniciar_sesion;
    private javax.swing.JMenuItem jMenu_lista_adyacencia;
    private javax.swing.JMenuItem jMenu_nodo_red;
    private javax.swing.JMenuItem jMenu_tabla_dispersion;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jText_consola;
    // End of variables declaration//GEN-END:variables
    //metodos de lectura e muestra de imagenes
    
    public void imagen_externo(String urlimg){
        try{
            File file = new File(urlimg);
            BufferedImage bufferedImage = ImageIO.read(file);
            ImageIcon imageIcon = new ImageIcon(bufferedImage);
            JFrame jframe = new JFrame();
            jframe.setLayout(new FlowLayout());
            jframe.setSize(600, 800);
            JLabel jlabel = new JLabel();
            
            jlabel.setIcon(imageIcon);
            jframe.add(jlabel);
            jframe.setVisible(true);
            jframe.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        } catch (IOException ex) {
            System.out.println("Ocurrio un error inesperado no se mostro la imagen");

        }
    
    }
    
    private void carga_user_json(String direccion){
        JSONParser parser = new JSONParser();
        try(Reader reader = new FileReader(direccion)){
            JSONArray arrayobj = (JSONArray) parser.parse(reader);
            //System.out.println(arrayobj);
            if(arrayobj.size()>0){
                for(int n = 0; n<arrayobj.size();n++){
                    JSONObject valor = (JSONObject)arrayobj.get(n);
                    long dpi = Long.parseLong((String) valor.get("dpi"));
                    String nombre = (String) valor.get("nombre_cliente");
                    String usuario = (String) valor.get("usuario");
                    String pass = (String) valor.get("password");
                    String hashpass = BCrypt.hashpw(pass,BCrypt.gensalt());
                    String correo = (String) valor.get("correo");
                    int telefono = Integer.parseInt((String) valor.get("telefono"));
                    String dir_user = (String) valor.get("direccion");
                    short id_municipio = Short.parseShort((String) valor.get("id_municipio"));
                    
                    //System.out.println("dpi: "+dpi+" nombre: "+nombre);
                    users.insertar(dpi,nombre,hashpass,usuario,correo,telefono,dir_user,id_municipio);
                }
            }
            
        }catch (IOException e) {
            System.out.println("EL ARCHIVO NO SE PUEDE ABRIR, O NO EXISTE");
        } catch (org.json.simple.parser.ParseException ex) {
            System.out.println("EL ARCHIVO NO ES UN ARCHIVO JSON");
        }
    }

    private void carga_mensajeros(String direccion){
        JSONParser parser = new JSONParser();
        
        try(Reader reader = new FileReader(direccion)){
            JSONArray arrayobj = (JSONArray) parser.parse(reader);
            
            if(arrayobj.size()>0){
                for (int n =0; n <arrayobj.size();n++){
                    JSONObject valor = (JSONObject) arrayobj.get(n);
                    long dpi = Long.parseLong((String)valor.get("dpi"));
                    String nombre= (String)valor.get("nombres");
                    String apellido = (String)valor.get("apellidos");
                    char licencia = valor.get("tipo_licencia").toString().charAt(0);
                    String genero = (String) valor.get("genero");
                    int telefono = Integer.parseInt((String)valor.get("telefono"));
                    String dir_mensajero = (String) valor.get("direccion");
                    
                    /*System.out.println(dpi +"\n"+nombre+"\n"+apellido+"\n"+
                            licencia+"\n"+genero+"\n"+telefono+"\n"+dir_mensajero);*/
                    mensajeros.insertar(dpi, nombre, apellido, licencia, genero, telefono, dir_mensajero);
                }
            }
        
        }catch (IOException e) {
            System.out.println("EL ARCHIVO NO SE PUEDE ABRIR, O NO EXISTE");
            
        } catch (org.json.simple.parser.ParseException ex) {
            System.out.println("EL ARCHIVO NO ES UN ARCHIVO JSON");

        }
    }
    
    private void carga_lugares(String direccion){
        JSONParser parser = new JSONParser();
        
        try(Reader reader = new FileReader(direccion)){
            JSONObject objeto = (JSONObject)parser.parse(reader);
            
            if(objeto.size()>0){
                for(Iterator iterator = objeto.keySet().iterator();iterator.hasNext();){
                    String key = (String) iterator.next();
                    JSONArray valor = (JSONArray)objeto.get(key);
                    for(int n = 0;n < valor.size();n++){
                        JSONObject valor_interno = (JSONObject)valor.get(n);
                        int id = Math.toIntExact((Long)valor_interno.get("id"));
                        String depto = (String) valor_interno.get("departamento");
                        String nombre = (String) valor_interno.get("nombre");
                        String sucursal = (String) valor_interno.get("sn_sucursal");
                        //System.out.println(id+"\n"+depto+"\n"+nombre+"\n"+sucursal+"\n");
                        lugares.agregar_lugar(id, depto, nombre, sucursal);
                    }
                }
            }
        }catch (IOException e) {
            System.out.println("EL ARCHIVO NO SE PUEDE ABRIR, O NO EXISTE");
            
        } catch (org.json.simple.parser.ParseException ex) {
            System.out.println("EL ARCHIVO NO ES UN ARCHIVO JSON");

        }
    }
    
    private void carga_ruta(String direccion){
        JSONParser parser = new JSONParser();
        
        try(Reader reader=new FileReader(direccion)){
            JSONObject objeto = (JSONObject)parser.parse(reader);
            
            if(objeto.size()>0){
                for(Iterator iterator = objeto.keySet().iterator();iterator.hasNext();){
                    String key = (String) iterator.next();
                    JSONArray valor = (JSONArray)objeto.get(key);
                    for(int n = 0;n < valor.size();n++){
                        JSONObject valor_interno = (JSONObject)valor.get(n);
                        int inicio = Math.toIntExact((Long)valor_interno.get("inicio"));
                        int fin = Math.toIntExact((Long)valor_interno.get("final"));
                        int peso = Math.toIntExact((Long)valor_interno.get("peso"));
                        //System.out.println(inicio+"\n"+fin+"\n"+peso+"\n");
                        lugares.insertar_ruta(inicio, fin, peso);
                    }
                }
            }
        }catch (IOException e) {
            System.out.println("EL ARCHIVO NO SE PUEDE ABRIR, O NO EXISTE");
            
        } catch (org.json.simple.parser.ParseException ex) {
            System.out.println("EL ARCHIVO NO ES UN ARCHIVO JSON");

        }
    }
}
